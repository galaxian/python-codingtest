# 큰수의 법칙은 다양한 수로 이루어진 배열이 있을 때
# 주어진 수들을 M번 더하여 가장 큰수를 만드는 방법이다.
# 단, 배열의 특정한 인덱스에 해당하는 수가
# 연속해서 K번을 초과하여 더해질 수 없는 것이 이 법칙의 특징이다.

# 첫째 줄에 N(2 <= N <= 1000), M(1 <= M <= 10000), K(1 <= K <= 10000) 의 자연수가 주어지며
# 각 자연수는 공백으로 구분한다.
#
# 둘째 줄에 N개의 자연수가 주어진다. 각 자연수는 공백으로 구분한다.
# 단, 각각의 자연수는 1 이상 10000 이하의 수로 주어진다.
# 입력으로 주어지는 K는 항상 M보다 작거나 같다.

# 이 문제는 가장 큰 수를 만들기 위해서 리스트에서 가장 큰 수를 K번 더하고
# 2번째 큰 수를 더한후
# 다시 가장 큰 수를 K번 더하는 과정을 반복하는 경우가 숫자의 합이 가장 큰 경우이다.
# 따라서 가장 큰 수와 2번재로 큰 수를 찾아 낸 후 조건문과 반복문을 통해
# 몇 번을 반복하면 정답인지 찾는 문제라고 생각한다.

n, m, k = map(int, input().split())
data = list(map(int, input().split()))

data.sort()
first = data[n - 1]
second = data[n - 2]

result = 0

while True:
    for i in range(k):  # 가장 큰 수를 K번 더한다
        if m == 0:
            break
        result += first
        m -= 1
    if m == 0:
        break
    result += second  # 두 번째로 큰 수를 더한다.
    m -= 1

print(result)
